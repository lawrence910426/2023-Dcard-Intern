// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: set_list.proto

package dcard_intern

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListClient is the client API for List service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListClient interface {
	SetList(ctx context.Context, opts ...grpc.CallOption) (List_SetListClient, error)
}

type listClient struct {
	cc grpc.ClientConnInterface
}

func NewListClient(cc grpc.ClientConnInterface) ListClient {
	return &listClient{cc}
}

func (c *listClient) SetList(ctx context.Context, opts ...grpc.CallOption) (List_SetListClient, error) {
	stream, err := c.cc.NewStream(ctx, &List_ServiceDesc.Streams[0], "/List/SetList", opts...)
	if err != nil {
		return nil, err
	}
	x := &listSetListClient{stream}
	return x, nil
}

type List_SetListClient interface {
	Send(*ListRequest) error
	CloseAndRecv() (*ListResponse, error)
	grpc.ClientStream
}

type listSetListClient struct {
	grpc.ClientStream
}

func (x *listSetListClient) Send(m *ListRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *listSetListClient) CloseAndRecv() (*ListResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ListServer is the server API for List service.
// All implementations must embed UnimplementedListServer
// for forward compatibility
type ListServer interface {
	SetList(List_SetListServer) error
	mustEmbedUnimplementedListServer()
}

// UnimplementedListServer must be embedded to have forward compatible implementations.
type UnimplementedListServer struct {
}

func (UnimplementedListServer) SetList(List_SetListServer) error {
	return status.Errorf(codes.Unimplemented, "method SetList not implemented")
}
func (UnimplementedListServer) mustEmbedUnimplementedListServer() {}

// UnsafeListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServer will
// result in compilation errors.
type UnsafeListServer interface {
	mustEmbedUnimplementedListServer()
}

func RegisterListServer(s grpc.ServiceRegistrar, srv ListServer) {
	s.RegisterService(&List_ServiceDesc, srv)
}

func _List_SetList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ListServer).SetList(&listSetListServer{stream})
}

type List_SetListServer interface {
	SendAndClose(*ListResponse) error
	Recv() (*ListRequest, error)
	grpc.ServerStream
}

type listSetListServer struct {
	grpc.ServerStream
}

func (x *listSetListServer) SendAndClose(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *listSetListServer) Recv() (*ListRequest, error) {
	m := new(ListRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// List_ServiceDesc is the grpc.ServiceDesc for List service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var List_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "List",
	HandlerType: (*ListServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetList",
			Handler:       _List_SetList_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "set_list.proto",
}
